class LRUCache {
    ListNode head;
    ListNode tail;
    Map<Integer, ListNode> map;
    int size;
    public LRUCache(int capacity) {
        this.head = new ListNode();
        this.tail = new ListNode();
        head.next = tail;
        tail.pre = head;
        map = new HashMap<>();
        size = capacity;
    }
    
    public int get(int key) {
        ListNode node = map.get(key);
        if (node == null) {
            return -1;
        }
        del(node);
        add(node);
        return node.val;
    }
    private void del(ListNode node) {
        ListNode pre = node.pre;
        ListNode nxt = node.next;
        pre.next = nxt;
        nxt.pre = pre;
    }
    private void add(ListNode node) {
        ListNode pre = tail.pre;
        pre.next = node;
        node.pre = pre;
        node.next = tail;
        tail.pre = node;
    }
    
    public void put(int key, int value) {
        ListNode node = map.get(key);
        if (node != null) {
            node.val = value;
            del(node);
            add(node);
        } else if (map.size() < size) {
            node = new ListNode(key, value);
            map.put(key, node);
            add(node);
        } else {
            node = new ListNode(key, value);
            map.remove(head.next.key);
            del(head.next);
            add(node);
            map.put(key, node);
        }
    }
}
class ListNode {
    int key;
    int val;
    ListNode next;
    ListNode pre;
    public ListNode(int key, int val) {
        this.key = key;
        this.val = val;
    }
    public ListNode() {
        
    }
}